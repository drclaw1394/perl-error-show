=head1 NAME

Error::Show - Show context and splain syntax errors and exceptions

=head1 SYNOPSIS

From the command line changes an error like this:

  ->perl examples/file_syn_error1.pl              
  "use" not allowed in expression at examples/file_syn_error1.pl line 9, at end of line
  syntax error at examples/file_syn_error1.pl line 9, near "adf
  use Socket"
  Execution of examples/file_syn_error1.pl aborted due to compilation errors.


To something a little more helpful, with no source modifications:

  ->perl  -MError::Show examples/file_syn_error1.pl
  examples/file_syn_error1.pl

   4   my $time=time;
   5   for(1..1000){
   6   	print "$_\n";
   7   }
   8   adf
   9=> use Socket;
  10   
  11   print "this will never work";

  "use" not allowed in expression at examples/file_syn_error1.pl line 9, at end of line
  syntax error at examples/file_syn_error1.pl line 9, near "adf
  use Socket"
  examples/file_syn_error1.pl had compilation errors.
  


To only perform a syntax check, use the -c flag like normal.  To enable showing
context for warnings during a check, add the warn options 

	perl -MError::Show -c examples/file_syn_error1.pl 

	perl -MError::Show=warn -c -w examples/file_syn_error1.pl 

Honours -I flags as you would expect to allow user include paths:

	perl -I my_lib -MError::Show -MAnother::Module  path/to/file.pl



Use at runtime to supplement exception handling:

  use Error::Show;

  #an die caught in a try/eval triggers an exception

  #No argument uses $@ as error
  say STDERR Error::Show;     

  #or a single exception argument of your choosing
  say STDERR Error::Show $@;  

  #Or customise the report format, line, program information
  say STDERR Error::Show line=>123, ... , error=>$e;


Generate context for your stack traces with L<Exception::Class::Base>:

  #supports no argument ($@), single argument or option pairs as
  #Error::Show::context does
  say STDERR Error::Show::tracer error=>$e;

Or supply a L<Devel::StackTrace> object directly 

  say STDERR Error::Show::tracer trace=>$my trace;
    


=head1 DESCRIPTION

From the command line this module transparently executes your syntactically
correct program. However in the case of syntax errors, it extracts context
(lines of code) surrounding them. The lines are prefixed with numbers  and the
nicely formated context is dumped on STDERR for you to see the error or your
ways. 

The resulting output is optionally filtered throught the L<splain> program,
with no effort on the users behalf to give more information on why syntax
errors and warnings might have occured. 

From withing a program at runtime, this module can be used to give the same
formated code context around the source of an exception and any associated
stack traces. 

It supports perl string exceptions and warnings directly and also provides the
ability to integrate third party CPAN exception objects and traces with minimal
effort, with out requiring them directly.


A handful of options provided basic configuration of how many lines of code to
print before and after the error line, indenting of stack trace context, etc.

No symbols are exported and as such they must be accesses via the package name.

=head1 USAGE

=head2 Command Line usage (Syntax checking)

	perl -MError::Show  [options] file.pl 

When included in a command line switch to perl C<-MError::Show>, it syntax
checks the input program. If the syntax is OK, normal execution continues.
Otherwise detailed code context surrounding the source of the error is
generated and printed on STDERR.

B<NOTE:>It is important that it's the first C<-M> switch.

Additional C<@INC> directories and perl switches can also be used as per
normal.

The -c -I flags are honoured when the script is being checked internally, to
give as transparent as possible script checking before executing.

B<Syntax Checking Options>

The following options can be used in isolation or together

=head4 clean

If you prefer just the code context without the perl error, add the clean
option:

  perl -MError::Show=clean file.pl

=head4 warn

This options enables processing of wanrings as well as errors.

  perl -MError::Show=warn file.pl


=head4 splain

Runs the output through the splain program (see L<diagnostics>), giving
probable reasons behind the error or warning

  perl -MError::Show=splain file.pl


=head2 Exception (in program) Usage

Simply bring L<Error::Show> into your program with a use statement:

  use Error::Show;

It provides a single subroutine for processing errors and exceptions.

=head3 Error::Show::context

  my $context=Error::Show::context;                     (1)
  my $context=Error::Show::context $error;              (2)
  my $context=Error::Show::context option_pairs, message=>$error_as_string, frames=>$stack frames (3)
	
Takes an error string, or exception object and extracts the code surrounding
the source of the error. The code lines are prefixed with line numbers and the
error line marked with a fat arrow.

The return value is the formated context, followed by the original perl error
strings, or stringified exeception objects/messages:


  filename.pl 
  10  #code before 
  11  #code before 
  12=>#this line caused the error
  13  #code after
  14  #code after

  ... error... at filename.pl line 12 ...




In the first form (1), the C<$@> variable is implicitly used as the error. No
processing options can be supplied in this form. 

In the second form (2), a single argument is supplied, which becomes the error
to process. No processing options can be supplied in this form.

In the third for (3), all options are provided as key value pairs. 

The expected types of data are as follows:

=over 

=item 1. String Errors(like perl errors)

Error string, as per C<die> and C<warn>, contining file and line number. These
aare extracted from the string error to locate context.

The output message is this string exactly.

=item 2. An reference to an array containing results from C<caller>

The filename, and line elements are used to process. No error message is output
unless the B<message> option is also specified. 

=item 3. An Devel::StackTrace::Frame object

This is converted internally to a array of C<caller> output. As above.

=item 4. or, an array of 2. or  3.

An refernce to an array of call frames in C<caller> or
C<Devel::StackTrace::Frame> format can also be splied as the error. Again the
the C<message> option needs to be provided if error string is required in the
output.

=back

B<Options include:>

=head4 pre_lines

  pre_lines=>value

Specific the maximum lines of code to display before the error line. Default is
5.

=head4 post_lines

  post_lines=>value

Specific the maximum lines of code to display after the error line. Default is
5.

=head4 clean

  clean=>bool

When true, the normal perl error string is not included in the context
information, for a cleaner look.


=head4 indent
  
    indent=>string

The string to use for each level of indent. Defaults to 4 spaces.

=head4 splain

    splain=>1

The resulting output will be filtered through the L<splain> program.  

=head1 EXAMPLES

=head2 Integrating with Exception classes

=head3 Mojolicous

=head3 Exception::Base

=head3 Exception::Class::Base

=head3 Class::Throwable


Please see the examples directory in this distribution

=head1 FUTURE WORK/TODO

=over 

=item Make usable from a Language Server?

=item Colour terminal output

=item JSON output?

=back

=head1 KNOWN ISSUES/GOTCHAS

Checking/running  programs via the -e and -E switches is not supported and will
die with an error message.

Only the first error in the perl error messages is used to find the context.
Hopefully it's the right one ;) 

=head1 DETAILS ON HOW IT WORKS

This module operates in two modes.

=head2
A summary of the command line syntax checking process:

=over 

=item 1. A new perl process is run to extract defauly @INC paths

This prints the paths back to the main script.

=item 2. @INC paths compared and B<-I> options identified

The difference between the main script C<@INC> and the information gathered
previously reveals the B<-I> options the user specified

=item 3. New perl process to execute Syntax checking

Another perl process, with the additional B<-I> arguments, and the
C<Error::Show::Internal> helper module is run in check mode

=item 4. Parsing of error information

The output is read in by the main process, with filenames, and line numbers
extracted from the first error string

=item 5. Building context

The filename parsed out from the error is slurped into an array of lines. Only
lines withing the configured range before and after the error line are kept.
This lines are are prepended and formatted with the line number. The proported
error line is also marked with a fat arrow to make it stand out

=item 6. Reporting

These lines are printed to STDERR, followed by the original perl error strings.


=back



=head1 SEE ALSO

L<Perl::Syntax> provides syntax checking from the command line. However it
doesn't show any errors by design (only interested in process return code)

L<Syntax::Check> provides programmatic syntax checking of files.

L<Perl::Critic> gives actual perl linting, but not great for syntax errors.

L<diagnostics>  and the C<splain> program give some very useful explanations
about the otherwise terse error strings normally output. It is part of the perl
distribution

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 REPOSITORTY and BUGS

Please report any bugs via git hub:
L<http://github.com/drclaw1394/perl-error-show>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 by Ruben Westerberg

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl or the MIT license.

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE.
=cut
